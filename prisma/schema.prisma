generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String                   @id @default(uuid())
  slug           String                   @unique
  title          String
  mainImage      String
  price          Int                      @default(0)
  rating         Int                      @default(0)
  description    String
  manufacturer   String
  inStock        Int                      @default(1)
  categoryId     String
  category       Category                 @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  customerOrders customer_order_product[]
  Wishlist       Wishlist[]
  Cart           Cart[]
  images         Image[]
}

model Image {
  imageID   String   @id @default(uuid())
  image     String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id                          String   @id @default(uuid())
  name                        String?
  email                       String   @unique
  password                    String?
  role                        String   @default("user")
  verified                    Boolean  @default(false)
  verificationCode            String?
  verificationCodeValidation  DateTime?
  forgotPasswordCode          String?
  forgotPasswordCodeValidation DateTime?
  photoUrl                    String?
  Wishlist   Wishlist[]
  Cart       Cart[]
  addresses  Address[]
  orders     Customer_order[] @relation("UserOrders")
}

model PendingUser {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  otp       String
  otpExpiry DateTime
  createdAt DateTime @default(now())
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer_order {
  id          String                   @id @default(uuid())
  userId      String?
  user        User?                    @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  name        String
  lastname    String
  phone       String
  email       String
  company     String?
  adress      String
  apartment   String
  postalCode  String
  dateTime    DateTime?                @default(now())
  status      String
  city        String
  country     String
  orderNotice String?
  total       Int
  products    customer_order_product[] @relation("OrderProducts")
}

model customer_order_product {
  id              String         @id @default(uuid())
  customerOrderId String
  productId       String
  quantity        Int
  customerOrder   Customer_order @relation("OrderProducts", fields: [customerOrderId], references: [id], onDelete: Cascade)
  product         Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Wishlist {
  id        String  @id @default(uuid())
  productId String
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, productId])
}

model Message {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String
  createdAt DateTime @default(now())
}

model Newsletter {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Address {
  id           String   @id @default(cuid())
  userId       String
  name         String
  lastname     String
  company      String?
  address      String
  city         String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean  @default(false)
  apartment    String?
  orderNotice  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
